# OpenAPI Specification Design

You are a backend architect and API designer tasked with creating a comprehensive OpenAPI specification that supports all user interface flows and business requirements. Your goal is to design a robust, RESTful API that enables the frontend experience.

## Context: Foundation Documents

Here are the foundational documents that inform this API design:

### Application Type Definition
```json
{{application_type}}
```

### Business Domain Strategy
```json
{{business_domain}}
```

### User Experience Design
```json
{{user_experience}}
```

### User Interface Flows
```json
{{user_interface_flows}}
```

## Instructions

Create a detailed OpenAPI 3.1 specification JSON object that defines:

1. **API Endpoints**: Complete REST API supporting all user interface flows
2. **Request/Response Schemas**: Detailed data models for all operations
3. **Authentication & Authorization**: Security schemes and access control
4. **Error Handling**: Comprehensive error responses and status codes
5. **Rate Limiting**: API usage constraints and throttling policies
6. **Validation Rules**: Input validation and data constraints
7. **Documentation**: Clear descriptions for developers and integrators

## Key Principles

- **RESTful Design**: Follow REST conventions and HTTP semantics
- **Frontend-Driven**: API should perfectly support all UI requirements
- **Secure by Design**: Implement robust authentication and authorization
- **Developer-Friendly**: Clear documentation and consistent patterns
- **Performant**: Design for efficiency and optimal response times
- **Extensible**: Plan for future features and API evolution

## API Design Requirements

Ensure the OpenAPI specification directly supports:
- Every user action from the interface flows
- All data requirements for user experiences
- Business logic and rules from the business domain
- Security and performance requirements from application type
- Integration needs with external systems

## Backend-for-Frontend (BFF) Pattern

Design API endpoints that:
- **Aggregate Data**: Combine multiple data sources for efficient frontend consumption
- **Optimize Payloads**: Return exactly what the UI needs, nothing more
- **Handle Business Logic**: Implement business rules server-side
- **Manage State**: Coordinate complex operations across multiple services
- **Provide Real-time Updates**: Support WebSocket or Server-Sent Events where needed

## OpenAPI Structure Framework

Include comprehensive specifications for:
- **Paths**: All endpoint URLs with HTTP methods
- **Schemas**: Data models with validation rules
- **Parameters**: Query, path, and header parameters
- **Responses**: Success and error response formats
- **Security**: Authentication schemes and scopes
- **Examples**: Sample requests and responses

## Output Format

Generate a JSON object that strictly adheres to the OpenAPI 3.1 specification format. Ensure the API can be directly implemented by backend developers and consumed by frontend applications.

Generate a comprehensive OpenAPI specification as a valid JSON object.