# Software Architecture Design and Technical Implementation Strategy

You are a software architect tasked with designing comprehensive technical architecture that supports all user experiences, business requirements, and application interfaces. Your goal is to create a robust, scalable architecture that enables the entire application ecosystem.

## Context: Foundation Documents

Here are the foundational documents that inform this architecture design:

### Application Type Definition
```json
{{application_type}}
```

### Business Domain Strategy
```json
{{business_domain}}
```

### User Experience Design
```json
{{user_experience}}
```

### User Interface Flows
```json
{{user_interface_flows}}
```

### Application Interface Specification
{{#if site_map}}
### Site Map
```json
{{site_map}}
```
{{/if}}
{{#if open_api}}
### OpenAPI Specification
```json
{{open_api}}
```
{{/if}}
{{#if cli_spec}}
### CLI Specification
```json
{{cli_spec}}
```
{{/if}}

## Instructions

Create a detailed architecture JSON object that defines:

1. **Architecture Overview**: High-level architectural style and design principles
2. **Functional Architecture**: Tech stack supporting functional requirements
3. **Non-Functional Architecture**: Systems supporting performance, security, scalability
4. **Infrastructure**: Cloud, deployment, and operational architecture
5. **Development Architecture**: Development practices, testing, and quality assurance
6. **Technical Debt Management**: Known debt and migration strategies
7. **Architectural Decision Records**: Key decisions with rationale and trade-offs

## Key Principles

- **Requirements-Driven**: Every architectural decision should trace to specific requirements
- **Quality Attributes First**: Prioritize architecture around critical quality attributes
- **Evolutionary Design**: Plan for change and growth over time
- **Risk-Aware**: Address major technical and business risks
- **Team-Appropriate**: Match architecture complexity to team capabilities
- **Cost-Effective**: Balance ideal solutions with practical constraints

## Architecture Requirements

Ensure the architecture directly supports:
- All user journeys and interface interactions
- Business scalability projections and growth requirements
- Performance, security, and reliability targets from application type
- Integration requirements with external systems
- Development team size and capability constraints
- Budget and timeline constraints from business domain

## Technical Decision Framework

For each architectural choice, consider:
- **Functional Requirements**: Does it enable required user experiences?
- **Non-Functional Requirements**: Does it meet performance/security/scalability needs?
- **Team Capabilities**: Can the team build and maintain this architecture?
- **Business Constraints**: Does it fit budget, timeline, and risk tolerance?
- **Future Growth**: Will it scale with projected business growth?
- **Technical Risk**: What are the failure modes and mitigation strategies?

## Architecture Documentation

Include comprehensive specifications for:
- **System Context**: Boundaries, users, and external dependencies
- **Component Architecture**: Services, databases, and integration patterns
- **Deployment Architecture**: Infrastructure, scaling, and operational concerns
- **Security Architecture**: Authentication, authorization, and data protection
- **Data Architecture**: Storage, processing, and analytics systems
- **Development Process**: CI/CD, testing, and quality assurance

## Output Format

Generate a JSON object that strictly adheres to the architecture schema. Ensure the architecture can guide development teams and inform infrastructure decisions.

Generate a comprehensive software architecture specification as a valid JSON object.