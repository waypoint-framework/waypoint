{
  "testSuites": [
    {
      "id": "campaign_creation_suite",
      "name": "Campaign Creation End-to-End Tests",
      "description": "Test suite covering the complete campaign creation workflow from goal input to launch",
      "feature": "ai_campaign_creation",
      "userExperience": "small_business_first_campaign",
      "userInterface": "campaign_creation_flow",
      "priority": "critical",
      "tags": ["e2e", "campaign_creation", "ai_generation", "small_business"],
      "testDataSets": [
        {
          "id": "small_business_yoga_campaign",
          "name": "Small Business Owner Creates Yoga Class Promotion",
          "description": "Mike creates his first marketing campaign to promote new yoga classes at his fitness studio",
          "testType": "end_to_end",
          "action": {
            "id": "submit_campaign_goal",
            "name": "Submit Campaign Goal",
            "description": "User enters campaign goal and proceeds to AI content generation",
            "type": "user_action",
            "actor": "user",
            "method": "form_submission",
            "parameters": {
              "input": {
                "campaignGoal": "Promote new yoga classes at my fitness studio to get 20 sign-ups in 2 weeks",
                "targetAudience": "existing_plus_local",
                "platforms": ["facebook", "instagram", "email"],
                "budget": {"total": 500, "currency": "USD"}
              },
              "context": {
                "userPersona": "small_business_owner_mike",
                "deviceType": "desktop",
                "timeOfDay": "evening"
              }
            },
            "location": "/campaigns/create?step=1",
            "timing": {
              "timeout": "30 seconds",
              "expectedDuration": "2-5 minutes"
            }
          },
          "preconditions": {
            "systemState": {
              "applicationState": "User logged in to campaign creation wizard",
              "userSession": "Authenticated small business owner with basic plan",
              "permissions": ["create_campaigns", "use_ai_generation"],
              "featureFlags": {"ai_generation_enabled": true, "brand_voice_setup": true},
              "configuration": {"openai_api_available": true, "facebook_api_available": true},
              "services": ["authentication_service", "ai_generation_service", "campaign_service"]
            },
            "dataState": {
              "database": {
                "user_profile": {
                  "id": "user_123",
                  "plan": "basic",
                  "campaigns_this_month": 0,
                  "ai_generations_remaining": 50
                },
                "brand_voice": {
                  "configured": true,
                  "formality": 6,
                  "enthusiasm": 8,
                  "business_type": "fitness_studio"
                }
              },
              "files": ["brand_guidelines.pdf uploaded"],
              "cache": "AI models warmed up",
              "externalData": "Facebook and Instagram accounts connected",
              "userGeneratedData": "Business profile completed with studio details"
            },
            "environmentState": {
              "browserState": "Chrome 100+, cookies enabled, local storage available",
              "networkConditions": "Stable broadband connection",
              "deviceState": "Desktop with 1920x1080 resolution",
              "timeZone": "America/New_York",
              "locale": "en-US"
            },
            "businessState": {
              "userType": "small_business_owner",
              "subscriptionLevel": "basic_plan",
              "organizationState": "Single user account",
              "billingState": "Active subscription, payment method valid"
            },
            "testData": {
              "fixtures": ["small_business_user.json", "fitness_studio_brand.json"],
              "mocks": ["openai_api_mock", "facebook_api_mock"],
              "seedData": {
                "social_media_accounts": ["@mikesfitstudio_fb", "@mikesfitstudio_ig"],
                "email_list": "200 existing members"
              }
            }
          },
          "postconditions": {
            "systemState": {
              "applicationState": "Campaign wizard advances to content preview step",
              "sessionChanges": "Progress saved to session storage",
              "configurationChanges": "None"
            },
            "dataState": {
              "databaseChanges": {
                "new_campaign_draft": {
                  "id": "campaign_456",
                  "status": "draft",
                  "goal": "Promote new yoga classes...",
                  "user_id": "user_123",
                  "created_at": "timestamp"
                }
              },
              "dataCreated": "Campaign draft record, AI generation request",
              "dataModified": "User's campaigns_this_month incremented"
            },
            "userExperience": {
              "uiChanges": "Wizard progress indicator shows step 2, loading animation for AI generation",
              "notifications": ["Campaign goal saved", "Generating content..."],
              "navigation": "URL updates to /campaigns/create?step=2",
              "feedback": "Progress indicator shows AI content generation in progress",
              "accessibility": "Screen reader announces progress update",
              "performance": "Page transition completes within 500ms"
            },
            "businessOutcomes": {
              "metrics": {"campaign_creation_starts": "+1", "ai_generation_requests": "+1"},
              "events": ["campaign_creation_initiated", "ai_generation_started"],
              "workflows": ["Campaign creation workflow advanced to step 2"]
            },
            "integrations": {
              "apiCalls": ["POST /campaigns", "POST /ai/generate-content"],
              "logs": ["Campaign creation started", "AI generation request queued"]
            }
          },
          "validationRules": [
            {
              "id": "campaign_draft_created",
              "name": "Campaign Draft Successfully Created",
              "type": "assertion",
              "description": "Verify that campaign draft is saved in database",
              "target": "database.campaigns table",
              "condition": "Campaign record exists with correct user_id and goal",
              "expectedValue": "Draft campaign with user_123 and yoga goal text",
              "priority": "critical"
            },
            {
              "id": "ai_generation_triggered",
              "name": "AI Content Generation Initiated",
              "type": "verification",
              "description": "Verify AI generation service receives request",
              "target": "ai_generation_service.queue",
              "condition": "Generation request queued with campaign context",
              "expectedValue": "Request with campaign_id and brand voice parameters",
              "timeout": "10 seconds",
              "priority": "critical"
            },
            {
              "id": "user_feedback_displayed",
              "name": "User Receives Progress Feedback",
              "type": "check",
              "description": "Loading indicator shows generation progress",
              "target": "ui.loading_indicator",
              "condition": "Progress indicator visible and updating",
              "expectedValue": "Loading animation with 'Generating content' message",
              "priority": "high"
            },
            {
              "id": "session_state_maintained",
              "name": "User Session State Preserved",
              "type": "verification",
              "description": "User can continue if they refresh page",
              "target": "session_storage.campaign_draft",
              "condition": "Draft data persisted in session",
              "expectedValue": "Campaign draft data available for restoration",
              "priority": "medium"
            }
          ],
          "errorScenarios": [
            {
              "id": "ai_generation_timeout",
              "name": "AI Generation Service Timeout",
              "description": "OpenAI API takes longer than 45 seconds to respond",
              "trigger": "OpenAI API response time > 45 seconds",
              "errorType": "timeout",
              "expectedBehavior": "Show timeout message with retry option and fallback to templates",
              "recovery": "User can retry generation or continue with template-based approach",
              "userImpact": "Slight delay but campaign creation can continue"
            },
            {
              "id": "plan_limit_exceeded",
              "name": "Monthly AI Generation Limit Reached",
              "description": "User has used all AI generations for their plan",
              "trigger": "User's ai_generations_remaining = 0",
              "errorType": "business_rule",
              "expectedBehavior": "Show upgrade prompt with clear explanation of limits",
              "recovery": "User can upgrade plan or wait for next month",
              "userImpact": "Campaign creation blocked until upgrade or limit reset"
            },
            {
              "id": "invalid_goal_input",
              "name": "Campaign Goal Too Short or Vague",
              "description": "User enters goal with less than 10 characters",
              "trigger": "Goal input validation fails",
              "errorType": "validation",
              "expectedBehavior": "Show validation error with helpful suggestions",
              "recovery": "User adds more detail to campaign goal",
              "userImpact": "Immediate feedback prevents poor AI generation"
            }
          ],
          "performance": {
            "responseTime": "Form submission < 2 seconds, AI generation < 30 seconds",
            "throughput": "Support 100 concurrent campaign creations",
            "resourceUsage": "< 50MB memory for wizard state",
            "loadConditions": "Test under normal load conditions"
          },
          "metadata": {
            "author": "QA Team",
            "created": "2024-03-15T10:00:00Z",
            "lastModified": "2024-03-15T10:00:00Z",
            "version": "1.0",
            "coverage": ["campaign_creation", "ai_generation", "user_onboarding"],
            "dependencies": ["user_authentication_tests", "brand_voice_setup_tests"],
            "environment": ["staging", "production"],
            "automation": true,
            "frequency": "every_commit"
          }
        },
        {
          "id": "brand_voice_content_consistency",
          "name": "AI Generated Content Matches Brand Voice",
          "description": "Verify that AI-generated content maintains consistent brand voice across all content types",
          "testType": "integration",
          "action": {
            "id": "generate_content_with_brand_voice",
            "name": "Generate Content with Brand Voice",
            "description": "AI generates campaign content using configured brand voice parameters",
            "type": "system_action",
            "actor": "system",
            "method": "ai_content_generation",
            "parameters": {
              "input": {
                "campaign_goal": "Promote yoga classes",
                "brand_voice_id": "brand_voice_123",
                "content_types": ["social_post", "email_subject", "ad_headline"]
              },
              "context": {
                "brand_parameters": {
                  "formality": 6,
                  "enthusiasm": 8,
                  "vocabulary": ["wellness", "community", "mindful"]
                }
              }
            }
          },
          "preconditions": {
            "systemState": {
              "applicationState": "AI generation service available",
              "services": ["openai_api", "brand_voice_engine"]
            },
            "dataState": {
              "database": {
                "brand_voice_config": {
                  "id": "brand_voice_123",
                  "formality": 6,
                  "enthusiasm": 8,
                  "trained": true
                }
              }
            },
            "testData": {
              "fixtures": ["brand_voice_fitness_studio.json"],
              "mocks": ["openai_api_with_brand_context"]
            }
          },
          "postconditions": {
            "dataState": {
              "dataCreated": "Generated content pieces for each content type"
            },
            "businessOutcomes": {
              "metrics": {"brand_consistency_score": "> 85"}
            }
          },
          "validationRules": [
            {
              "id": "brand_consistency_score",
              "name": "Brand Consistency Above Threshold",
              "type": "comparison",
              "description": "AI-calculated brand consistency score meets minimum threshold",
              "target": "generated_content.brand_consistency_score",
              "condition": "score >= 85",
              "expectedValue": "85-100",
              "priority": "critical"
            },
            {
              "id": "vocabulary_alignment",
              "name": "Content Uses Brand Vocabulary",
              "type": "match",
              "description": "Generated content includes preferred brand vocabulary",
              "target": "generated_content.text",
              "condition": "Contains brand vocabulary words",
              "expectedValue": "At least 2 brand vocabulary words per content piece",
              "priority": "high"
            }
          ]
        }
      ]
    },
    {
      "id": "brand_voice_setup_suite",
      "name": "Brand Voice Configuration Tests",
      "description": "Test suite for brand voice upload, analysis, and configuration",
      "feature": "brand_voice_setup",
      "userExperience": "marketing_manager_brand_setup",
      "userInterface": "brand_voice_setup_flow",
      "priority": "high",
      "tags": ["brand_voice", "ai_training", "file_upload"],
      "testDataSets": [
        {
          "id": "brand_document_upload",
          "name": "Upload Brand Guidelines Documents",
          "description": "Marketing manager uploads brand guidelines and sample content for AI training",
          "testType": "integration",
          "action": {
            "id": "upload_brand_documents",
            "name": "Upload Brand Documents",
            "description": "User uploads PDF and DOCX files containing brand guidelines",
            "type": "user_action",
            "actor": "user",
            "method": "file_upload",
            "parameters": {
              "input": {
                "files": ["brand_guidelines.pdf", "sample_content.docx"],
                "total_size": "15MB"
              }
            }
          },
          "preconditions": {
            "systemState": {
              "applicationState": "Brand voice setup page loaded",
              "userSession": "Admin user authenticated",
              "permissions": ["manage_brand_voice"],
              "services": ["file_upload_service", "document_processing_service"]
            },
            "testData": {
              "fixtures": ["brand_guidelines.pdf", "sample_marketing_content.docx"],
              "mocks": ["document_processing_api"]
            }
          },
          "postconditions": {
            "dataState": {
              "dataCreated": "Uploaded files stored in secure bucket",
              "dataModified": "Brand voice analysis initiated"
            },
            "integrations": {
              "apiCalls": ["POST /brand-voice/upload", "POST /documents/analyze"]
            }
          },
          "validationRules": [
            {
              "id": "files_uploaded_successfully",
              "name": "Files Uploaded to Secure Storage",
              "type": "exists",
              "description": "Verify files are stored securely and accessible",
              "target": "aws_s3.brand_documents_bucket",
              "condition": "Files exist with correct permissions",
              "expectedValue": "2 files uploaded with user_id in metadata",
              "priority": "critical"
            },
            {
              "id": "document_processing_initiated",
              "name": "Document Analysis Started",
              "type": "verification",
              "description": "Document processing service begins text extraction",
              "target": "document_processing_service.queue",
              "condition": "Processing job queued",
              "expectedValue": "Job with file URLs and user context",
              "priority": "high"
            }
          ],
          "errorScenarios": [
            {
              "id": "file_size_exceeded",
              "name": "File Size Limit Exceeded",
              "description": "User uploads files larger than 50MB total",
              "trigger": "Total file size > 50MB",
              "errorType": "validation",
              "expectedBehavior": "Clear error message with size limit explanation",
              "recovery": "User removes or compresses files",
              "userImpact": "Upload blocked until size reduced"
            },
            {
              "id": "unsupported_file_format",
              "name": "Unsupported File Format",
              "description": "User uploads file in unsupported format",
              "trigger": "File type not in [PDF, DOCX, TXT]",
              "errorType": "validation",
              "expectedBehavior": "Error message listing supported formats",
              "recovery": "User converts file to supported format",
              "userImpact": "File rejected with clear guidance"
            }
          ]
        }
      ]
    },
    {
      "id": "campaign_analytics_suite",
      "name": "Campaign Analytics and Performance Tests",
      "description": "Test suite for campaign performance tracking and analytics display",
      "feature": "campaign_performance_tracking",
      "userExperience": "agency_director_multi_client_tracking",
      "priority": "high",
      "tags": ["analytics", "performance", "real_time_data"],
      "testDataSets": [
        {
          "id": "real_time_metrics_update",
          "name": "Real-time Campaign Metrics Update",
          "description": "Verify that campaign performance metrics update in real-time as data comes in",
          "testType": "integration",
          "action": {
            "id": "receive_platform_analytics",
            "name": "Receive Analytics Data from Platform",
            "description": "System receives new performance data from Facebook/Instagram APIs",
            "type": "system_action",
            "actor": "external_service",
            "method": "webhook_notification",
            "parameters": {
              "input": {
                "platform": "facebook",
                "campaign_id": "fb_campaign_789",
                "metrics": {
                  "impressions": 1500,
                  "clicks": 45,
                  "engagement": 3.2,
                  "cost": 15.75
                }
              }
            }
          },
          "preconditions": {
            "systemState": {
              "applicationState": "Campaign active and connected to Facebook",
              "services": ["analytics_service", "webhook_processor"]
            },
            "dataState": {
              "database": {
                "active_campaign": {
                  "id": "campaign_456",
                  "status": "active",
                  "platform_ids": {"facebook": "fb_campaign_789"}
                }
              }
            }
          },
          "postconditions": {
            "dataState": {
              "dataModified": "Campaign metrics updated with new data"
            },
            "userExperience": {
              "uiChanges": "Dashboard charts update with new metrics"
            }
          },
          "validationRules": [
            {
              "id": "metrics_updated_database",
              "name": "Metrics Stored in Database",
              "type": "verification",
              "description": "New metrics are correctly stored",
              "target": "database.campaign_metrics",
              "condition": "Latest metrics match received data",
              "expectedValue": "Impressions: 1500, Clicks: 45",
              "priority": "critical"
            },
            {
              "id": "ui_reflects_updates",
              "name": "UI Updates with New Data",
              "type": "check",
              "description": "Dashboard shows updated metrics",
              "target": "ui.analytics_dashboard",
              "condition": "Charts display new values",
              "expectedValue": "Updated impression and click counts",
              "timeout": "5 seconds",
              "priority": "high"
            }
          ]
        }
      ]
    }
  ],
  "globalConfiguration": {
    "testEnvironments": [
      {
        "name": "staging",
        "description": "Staging environment for integration testing",
        "baseUrl": "https://api-staging.campaignai.com",
        "configuration": {
          "database": "campaignai_staging",
          "ai_service": "openai_staging_key",
          "social_apis": "test_credentials"
        }
      },
      {
        "name": "production",
        "description": "Production environment for smoke tests",
        "baseUrl": "https://api.campaignai.com",
        "configuration": {
          "database": "campaignai_production",
          "ai_service": "openai_production_key",
          "social_apis": "production_credentials"
        }
      }
    ],
    "dataManagement": {
      "strategy": "isolated",
      "retention": "30 days for test data",
      "anonymization": true,
      "backups": false
    },
    "reporting": {
      "formats": ["junit_xml", "html_report", "json"],
      "destination": "test_results/",
      "notifications": ["slack_qa_channel", "email_qa_team"]
    }
  }
}