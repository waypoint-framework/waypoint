{
  "openapi": "3.1.0",
  "info": {
    "title": "CampaignAI Backend-for-Frontend API",
    "description": "API supporting the CampaignAI web application frontend, providing campaign management, AI content generation, and analytics",
    "version": "1.0.0",
    "contact": {
      "name": "CampaignAI API Team",
      "email": "api@campaignai.com",
      "url": "https://campaignai.com/contact"
    },
    "license": {
      "name": "Proprietary",
      "url": "https://campaignai.com/terms"
    }
  },
  "servers": [
    {
      "url": "https://api.campaignai.com/v1",
      "description": "Production server"
    },
    {
      "url": "https://api-staging.campaignai.com/v1",
      "description": "Staging server"
    },
    {
      "url": "http://localhost:3001/v1",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/campaigns": {
      "get": {
        "summary": "List user campaigns",
        "description": "Retrieve all campaigns for the authenticated user with optional filtering",
        "operationId": "listCampaigns",
        "tags": ["Campaigns"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filter campaigns by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["draft", "active", "paused", "completed", "failed"]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of campaigns to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of campaigns to skip for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of campaigns",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "campaigns": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Campaign"
                      }
                    },
                    "total": {
                      "type": "integer",
                      "description": "Total number of campaigns"
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create new campaign",
        "description": "Create a new campaign draft from user input",
        "operationId": "createCampaign",
        "tags": ["Campaigns"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCampaignRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Campaign created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "description": "Payment required - plan limits exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanLimitError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/campaigns/{campaignId}": {
      "get": {
        "summary": "Get campaign details",
        "description": "Retrieve detailed information about a specific campaign",
        "operationId": "getCampaign",
        "tags": ["Campaigns"],
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique campaign identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignDetail"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "summary": "Update campaign",
        "description": "Update campaign details and content",
        "operationId": "updateCampaign",
        "tags": ["Campaigns"],
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCampaignRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Campaign updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/campaigns/{campaignId}/generate": {
      "post": {
        "summary": "Generate campaign content with AI",
        "description": "Use AI to generate campaign content based on user inputs and brand voice",
        "operationId": "generateCampaignContent",
        "tags": ["AI Generation"],
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateContentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Content generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratedContent"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "429": {
            "description": "Rate limit exceeded for AI generation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/campaigns/{campaignId}/launch": {
      "post": {
        "summary": "Launch campaign",
        "description": "Publish campaign content to selected platforms and activate campaign",
        "operationId": "launchCampaign",
        "tags": ["Campaign Management"],
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchCampaignRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Campaign launched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LaunchResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "description": "Insufficient budget or payment method required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequiredError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/campaigns/{campaignId}/analytics": {
      "get": {
        "summary": "Get campaign analytics",
        "description": "Retrieve performance metrics and analytics for a campaign",
        "operationId": "getCampaignAnalytics",
        "tags": ["Analytics"],
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date for analytics data (ISO 8601)"
          },
          {
            "name": "dateTo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date for analytics data (ISO 8601)"
          },
          {
            "name": "metrics",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["impressions", "clicks", "engagement", "conversions", "cost", "reach"]
              }
            },
            "description": "Specific metrics to include"
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign analytics data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignAnalytics"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/brand-voice": {
      "get": {
        "summary": "Get brand voice settings",
        "description": "Retrieve current brand voice configuration",
        "operationId": "getBrandVoice",
        "tags": ["Brand Voice"],
        "responses": {
          "200": {
            "description": "Brand voice configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandVoice"
                }
              }
            }
          },
          "404": {
            "description": "Brand voice not configured"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Configure brand voice",
        "description": "Upload brand documents and configure AI brand voice settings",
        "operationId": "configureBrandVoice",
        "tags": ["Brand Voice"],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/BrandVoiceUpload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Brand voice configured successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandVoiceAnalysis"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/profile": {
      "get": {
        "summary": "Get user profile",
        "description": "Retrieve authenticated user's profile information",
        "operationId": "getUserProfile",
        "tags": ["User Management"],
        "responses": {
          "200": {
            "description": "User profile data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/integrations": {
      "get": {
        "summary": "List platform integrations",
        "description": "Get status of social media and marketing platform integrations",
        "operationId": "getIntegrations",
        "tags": ["Integrations"],
        "responses": {
          "200": {
            "description": "Integration status list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/integrations/{platform}/connect": {
      "post": {
        "summary": "Connect platform integration",
        "description": "Initiate OAuth flow to connect social media or marketing platform",
        "operationId": "connectIntegration",
        "tags": ["Integrations"],
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["facebook", "instagram", "linkedin", "twitter", "google_ads", "mailchimp"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth URL for platform connection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authUrl": {
                      "type": "string",
                      "format": "uri",
                      "description": "OAuth authorization URL"
                    },
                    "state": {
                      "type": "string",
                      "description": "OAuth state parameter"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Campaign": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique campaign identifier"
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "Campaign name"
          },
          "status": {
            "type": "string",
            "enum": ["draft", "active", "paused", "completed", "failed"],
            "description": "Current campaign status"
          },
          "goal": {
            "type": "string",
            "maxLength": 500,
            "description": "Campaign objective description"
          },
          "targetAudience": {
            "type": "string",
            "description": "Target audience selection"
          },
          "budget": {
            "type": "object",
            "properties": {
              "total": {
                "type": "number",
                "minimum": 0
              },
              "currency": {
                "type": "string",
                "enum": ["USD", "EUR", "GBP"]
              },
              "spent": {
                "type": "number",
                "minimum": 0
              }
            }
          },
          "platforms": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["facebook", "instagram", "linkedin", "twitter", "email", "google_ads"]
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "launchedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": ["id", "name", "status", "goal", "createdAt", "updatedAt"]
      },
      "CampaignDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Campaign"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContentPiece"
                }
              },
              "schedule": {
                "$ref": "#/components/schemas/CampaignSchedule"
              },
              "brandConsistencyScore": {
                "type": "number",
                "minimum": 0,
                "maximum": 100,
                "description": "AI-calculated brand consistency score"
              }
            }
          }
        ]
      },
      "CreateCampaignRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "goal": {
            "type": "string",
            "minLength": 10,
            "maxLength": 500
          },
          "targetAudience": {
            "type": "string",
            "enum": ["existing_customers", "local_prospects", "existing_plus_local", "lookalike_audience"]
          },
          "platforms": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["facebook", "instagram", "linkedin", "twitter", "email", "google_ads"]
            },
            "minItems": 1
          },
          "budget": {
            "type": "object",
            "properties": {
              "total": {
                "type": "number",
                "minimum": 10
              },
              "currency": {
                "type": "string",
                "enum": ["USD", "EUR", "GBP"],
                "default": "USD"
              }
            },
            "required": ["total"]
          }
        },
        "required": ["name", "goal", "targetAudience", "platforms"]
      },
      "UpdateCampaignRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "goal": {
            "type": "string",
            "maxLength": 500
          },
          "targetAudience": {
            "type": "string"
          },
          "budget": {
            "type": "object",
            "properties": {
              "total": {
                "type": "number",
                "minimum": 0
              }
            }
          },
          "status": {
            "type": "string",
            "enum": ["draft", "paused", "active"]
          }
        }
      },
      "GenerateContentRequest": {
        "type": "object",
        "properties": {
          "contentTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["social_post", "email_subject", "email_body", "ad_headline", "ad_description", "blog_post"]
            }
          },
          "additionalContext": {
            "type": "string",
            "maxLength": 1000,
            "description": "Additional context for content generation"
          },
          "tone": {
            "type": "string",
            "enum": ["professional", "casual", "friendly", "urgent", "inspiring"],
            "description": "Desired tone for generated content"
          }
        },
        "required": ["contentTypes"]
      },
      "GeneratedContent": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentPiece"
            }
          },
          "brandConsistencyScore": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          },
          "generationTime": {
            "type": "number",
            "description": "Time taken to generate content in seconds"
          },
          "suggestions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "AI suggestions for content improvement"
          }
        },
        "required": ["content", "brandConsistencyScore"]
      },
      "ContentPiece": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": ["social_post", "email_subject", "email_body", "ad_headline", "ad_description", "image", "video"]
          },
          "platform": {
            "type": "string",
            "enum": ["facebook", "instagram", "linkedin", "twitter", "email", "google_ads"]
          },
          "content": {
            "type": "string",
            "description": "Generated text content"
          },
          "mediaUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL for generated images or videos"
          },
          "scheduledAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": ["draft", "scheduled", "published", "failed"]
          }
        },
        "required": ["id", "type", "platform", "content", "status"]
      },
      "LaunchCampaignRequest": {
        "type": "object",
        "properties": {
          "schedule": {
            "$ref": "#/components/schemas/CampaignSchedule"
          },
          "confirmBudget": {
            "type": "boolean",
            "description": "Confirmation that user approves the budget"
          }
        },
        "required": ["confirmBudget"]
      },
      "CampaignSchedule": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "description": "IANA timezone identifier"
          },
          "contentSchedule": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "contentId": {
                  "type": "string",
                  "format": "uuid"
                },
                "publishAt": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        },
        "required": ["startDate", "timezone"]
      },
      "LaunchResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "launchedAt": {
            "type": "string",
            "format": "date-time"
          },
          "platformResults": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "platform": {
                  "type": "string"
                },
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "externalId": {
                  "type": "string",
                  "nullable": true,
                  "description": "Platform-specific campaign ID"
                }
              }
            }
          }
        },
        "required": ["success", "launchedAt", "platformResults"]
      },
      "CampaignAnalytics": {
        "type": "object",
        "properties": {
          "campaignId": {
            "type": "string",
            "format": "uuid"
          },
          "dateRange": {
            "type": "object",
            "properties": {
              "from": {
                "type": "string",
                "format": "date"
              },
              "to": {
                "type": "string",
                "format": "date"
              }
            }
          },
          "metrics": {
            "type": "object",
            "properties": {
              "impressions": {
                "type": "integer",
                "minimum": 0
              },
              "clicks": {
                "type": "integer",
                "minimum": 0
              },
              "engagement": {
                "type": "number",
                "minimum": 0,
                "description": "Engagement rate as percentage"
              },
              "conversions": {
                "type": "integer",
                "minimum": 0
              },
              "cost": {
                "type": "number",
                "minimum": 0
              },
              "reach": {
                "type": "integer",
                "minimum": 0
              },
              "ctr": {
                "type": "number",
                "minimum": 0,
                "description": "Click-through rate as percentage"
              },
              "cpc": {
                "type": "number",
                "minimum": 0,
                "description": "Cost per click"
              },
              "cpa": {
                "type": "number",
                "minimum": 0,
                "description": "Cost per acquisition"
              }
            }
          },
          "platformBreakdown": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "platform": {
                  "type": "string"
                },
                "metrics": {
                  "type": "object"
                }
              }
            }
          },
          "timeSeriesData": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "date": {
                  "type": "string",
                  "format": "date"
                },
                "metrics": {
                  "type": "object"
                }
              }
            }
          }
        },
        "required": ["campaignId", "dateRange", "metrics"]
      },
      "BrandVoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "configured": {
            "type": "boolean"
          },
          "parameters": {
            "type": "object",
            "properties": {
              "formality": {
                "type": "integer",
                "minimum": 1,
                "maximum": 10
              },
              "enthusiasm": {
                "type": "integer",
                "minimum": 1,
                "maximum": 10
              },
              "complexity": {
                "type": "integer",
                "minimum": 1,
                "maximum": 10
              },
              "vocabulary": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "avoidWords": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "sampleContent": {
            "type": "string",
            "description": "Sample content in the brand voice"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["configured"]
      },
      "BrandVoiceUpload": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "description": "Brand guideline documents (PDF, DOCX)"
          },
          "sampleText": {
            "type": "string",
            "maxLength": 5000,
            "description": "Sample text in brand voice"
          }
        }
      },
      "BrandVoiceAnalysis": {
        "type": "object",
        "properties": {
          "analysisId": {
            "type": "string",
            "format": "uuid"
          },
          "parameters": {
            "$ref": "#/components/schemas/BrandVoice/properties/parameters"
          },
          "confidence": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "description": "Confidence in brand voice analysis"
          },
          "suggestions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "plan": {
            "type": "string",
            "enum": ["starter", "professional", "agency"]
          },
          "planLimits": {
            "type": "object",
            "properties": {
              "campaignsPerMonth": {
                "type": "integer"
              },
              "aiGenerationsPerMonth": {
                "type": "integer"
              },
              "brandVoices": {
                "type": "integer"
              }
            }
          },
          "usage": {
            "type": "object",
            "properties": {
              "campaignsThisMonth": {
                "type": "integer"
              },
              "aiGenerationsThisMonth": {
                "type": "integer"
              }
            }
          }
        },
        "required": ["id", "email", "plan"]
      },
      "Integration": {
        "type": "object",
        "properties": {
          "platform": {
            "type": "string",
            "enum": ["facebook", "instagram", "linkedin", "twitter", "google_ads", "mailchimp"]
          },
          "connected": {
            "type": "boolean"
          },
          "accountName": {
            "type": "string",
            "nullable": true
          },
          "lastSync": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "enum": ["active", "expired", "error", "not_connected"]
          }
        },
        "required": ["platform", "connected", "status"]
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          },
          "hasMore": {
            "type": "boolean"
          }
        },
        "required": ["limit", "offset", "hasMore"]
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            },
            "required": ["code", "message"]
          }
        }
      },
      "PlanLimitError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "properties": {
                  "code": {
                    "enum": ["PLAN_LIMIT_EXCEEDED"]
                  },
                  "limitType": {
                    "type": "string",
                    "enum": ["campaigns", "ai_generations", "brand_voices"]
                  },
                  "currentUsage": {
                    "type": "integer"
                  },
                  "planLimit": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      },
      "RateLimitError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "properties": {
                  "code": {
                    "enum": ["RATE_LIMIT_EXCEEDED"]
                  },
                  "retryAfter": {
                    "type": "integer",
                    "description": "Seconds until rate limit resets"
                  }
                }
              }
            }
          }
        ]
      },
      "PaymentRequiredError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "properties": {
                  "code": {
                    "enum": ["PAYMENT_REQUIRED"]
                  },
                  "reason": {
                    "type": "string",
                    "enum": ["insufficient_funds", "payment_method_required", "payment_failed"]
                  }
                }
              }
            }
          }
        ]
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request - validation error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized - invalid or missing authentication",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from authentication endpoint"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Campaigns",
      "description": "Campaign management operations"
    },
    {
      "name": "AI Generation",
      "description": "AI-powered content generation"
    },
    {
      "name": "Campaign Management",
      "description": "Campaign lifecycle management"
    },
    {
      "name": "Analytics",
      "description": "Campaign performance analytics"
    },
    {
      "name": "Brand Voice",
      "description": "Brand voice configuration and management"
    },
    {
      "name": "User Management",
      "description": "User profile and account operations"
    },
    {
      "name": "Integrations",
      "description": "Third-party platform integrations"
    }
  ]
}